library(tidyverse)
library(ggplot2)
library(ggfortify)
#install.packages("autoplotly")  # For autoplot
library(autoplotly)
#install.packages("forecast")  # For ggseasonplot
library(forecast)
library(lubridate) # parse_date_time
#install.packages("changepoint")
library(changepoint)  # For Cahnge point
library(stats)
library(dygraphs) # For dygraph
library(dplyr)
library(tseries)
library(vars)
housing_canada<- read.csv("CSV/house1980_2020.csv")
housing_canada_city<- read.csv("CSV/house1980_2020_with_city.csv")
housing_canada<- read.csv("CSV/house1980_2020.csv")
setwd("C:/Users/asamnani/Desktop/PC Data/PC Data/AI Course/York University/Course 2/Lab 3")
housing_canada<- read.csv("CSV/house1980_2020.csv")
housing_canada_city<- read.csv("CSV/house1980_2020_with_city.csv")
str (housing_canada)
head(housing_canada)
summary(housing_canada)
names(housing_canada)
names(housing_canada_city)
#ReName column 1
colnames(housing_canada)[1] <- "ref_date" # assign new name
colnames(housing_canada_city)[1] <- "ref_date" # assign new name
# Convert ref_date from Vactor to Date Format
head(housing_canada$ref_date,5) # check rows
housing_canada$full_date =  parse_date_time(housing_canada$ref_date,  '%Y-%m')
housing_canada$full_date <- as.Date(housing_canada$full_date, format = "%Y.%m.%d")
head(housing_canada$full_date,5)
housing_canada$yr  <-year(housing_canada$full_date)
# For 2nd Data
head(housing_canada_city$ref_date,5) # check rows
housing_canada_city$full_date =  parse_date_time(housing_canada_city$ref_date,  '%Y-%m')
housing_canada_city$full_date <- as.Date(housing_canada_city$full_date, format = "%Y.%m.%d")
head(housing_canada_city$full_date,5)
housing_canada_city$yr  <-year(housing_canada_city$full_date)
head(housing_canada_city, 5)
colSums(is.na(housing_canada)) # checking NA in all columns
#Remove Al NA in VALUE column
# For 1St Data
housing_canada <- housing_canada %>% filter(!VALUE=="NA")
housing_canada %>% filter(New.housing.price.indexes=="Land only" &  New.housing.price.indexes=="Total (house and land)") # check for items, unfortunately not items is there
housing_canada <- housing_canada %>% filter(!New.housing.price.indexes=="Land only" &  !New.housing.price.indexes=="Total (house and land)") # removing above items if available
# For 2nd Data
colSums(is.na(housing_canada_city)) # checking NA in all columns
housing_canada_city <- housing_canada_city %>% filter(!VALUE=="NA")
# Remove Total (house and land) and Land only
unique(housing_canada_city$New.housing.price.indexes)
housing_canada_city %>% filter(New.housing.price.indexes=="Land only" &  New.housing.price.indexes=="Total (house and land)") # checking items
housing_canada_city <- housing_canada_city %>% filter(!New.housing.price.indexes=="Land only" &  !New.housing.price.indexes=="Total (house and land)") # removing above item if available
# List Of States
unique(housing_canada$GEO)
# List Of Cities
unique(housing_canada_city$GEO)
cases <- c('Canada', 'Quebec', 'Toronto, Ontario' ,'Windsor, Ontario')
housing_sp1 <- housing_canada %>% filter( GEO == cases[1]) # province level 1
housing_sp2 <- housing_canada %>% filter( GEO == cases[2]) # province level 2
housing_sp3 <- housing_canada_city %>% filter( GEO == cases[3]) # City level 1
housing_sp4 <- housing_canada_city %>% filter( GEO == cases[4]) # city level 2
# Cut Data By The Start Date and End Date which be inputs
# I make Code To Select Date as interactive face
start_date <- parse_date_time("1980-01-01",  "%Y-%m-%d")
end_date <- parse_date_time("2020-12-01",  "%Y-%m-%d")
# Get Start year from each sub-Data set
start_year1 <- min(housing_sp1$yr)  # min start date of province level 1
start_year2 <- min(housing_sp2$yr)  # min start date of province level 2
start_year3 <- min(housing_sp3$yr)  # min start date of city level 1
start_year4 <- min(housing_sp4$yr)  # min start date of city level 2
time_series_m1 <- ts(housing_sp1$VALUE, start = c(start_year1, 1), frequency = 12) # ts for province level 1
time_series_m2 <- ts(housing_sp2$VALUE, start = c(start_year2, 2), frequency = 12) # ts for province level 2
time_series_m3 <- ts(housing_sp3$VALUE, start = c(start_year3, 3), frequency = 12) # ts for city level 1
time_series_m4 <- ts(housing_sp4$VALUE, start = c(start_year4, 4), frequency = 12) # ts for city level 2
All <- cbind (time_series_m1,time_series_m2,time_series_m3,time_series_m4) # combine province 1 & 2 and city 1 & 2
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dyAxis("y",label = "housing price index") %>%
dyAxis("y2", label = "Years") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE )  %>%
dyRangeSelector(dateWindow = c(start_date, end_date)) %>%
dyRoller()
# Plotting with forecast package for Each series ARIMA (Auto-Regressive Integrated Moving Average)
d.arima1 <- auto.arima(time_series_m1)
d.forecast1 <- forecast(d.arima1, level = c(50), h = 50)
autoplot(d.forecast1  , title = "sss" , xlab = "Years", ylab = "housing price index - Canada" ) # for province level 1
d.arima2 <- auto.arima(time_series_m2)
d.forecast2 <- forecast(d.arima2, level = c(50), h = 50)
autoplot(d.forecast2  , title = "sss" , xlab = "Years", ylab = "housing price index - Quebec" ) # for province level 2
d.arima3 <- auto.arima(time_series_m3)
d.forecast3 <- forecast(d.arima3, level = c(50), h = 50)
autoplot(d.forecast3  , title = "sss" , xlab = "Years", ylab = "housing price index - Toronto, Ontario" ) # for city level 1
d.arima4 <- auto.arima(time_series_m4)
d.forecast4 <- forecast(d.arima4, level = c(50), h = 50)
autoplot(d.forecast4  , title = "sss" , xlab = "Years", ylab = "housing price index - Vancouver, British Columbia" ) # for city level 2
head (All, 5) # top 5 rows
colnames(All) <- paste0(cases) # assign name of column
head (All, 5) # top 5 rows
All <-  na.remove(All)  # remove na
head (All, 5) # top 5 rows
# VARselect() enables the to determine an optimal lag length
VARselect(All, lag.max = 5, type = "const")
var.2c <- VAR(All, p = 2, type = "const") # generate estimation results
var.2c # show estimation results
names(var.2c) # show the funcation name
# The function returns a list object with the optimal  lag-order according to each of the criteria
summary(var.2c)
plot(var.2c)
# forecasting 10 steps ahead
#estimated with the function VAR() and as deterministic regresses a constant is included
var.f10 <- predict(var.2c, n.ahead = 10, ci = 0.95)
names(var.f10) # show object name
plot(var.f10)
plot(var.2c)
# forecasting 10 steps ahead
#estimated with the function VAR() and as deterministic regresses a constant is included
var.f10 <- predict(var.2c, n.ahead = 10, ci = 0.95)
plot(var.f10)
fanchart(var.f10)
head (All, 5) # top 5 rows
colnames(All) <- paste0(cases) # assign name of column
head (All, 5) # top 5 rows
All <-  na.remove(All)  # remove na
head (All, 5) # top 5 rows
# VARselect() enables the to determine an optimal lag length
VARselect(All, lag.max = 5, type = "const")
var.2c <- VAR(All, p = 2, type = "const") # generate estimation results
names(var.2c) # show the funcation name
# The function returns a list object with the optimal  lag-order according to each of the criteria
summary(var.2c)
plot(var.2c)
library(vars)
plot(var.2c)
head (All, 5) # top 5 rows
colnames(All) <- paste0(cases) # assign name of column
head (All, 5) # top 5 rows
All <-  na.remove(All)  # remove na
head (All, 5) # top 5 rows
# VARselect() enables the to determine an optimal lag length
VARselect(All, lag.max = 5, type = "const")
var.2c <- VAR(All, p = 2, type = "const") # generate estimation results
var.2c # show estimation results
names(var.2c) # show the funcation name
# The function returns a list object with the optimal  lag-order according to each of the criteria
summary(var.2c)
plot(var.2c)
# forecasting 10 steps ahead
#estimated with the function VAR() and as deterministic regresses a constant is included
var.f10 <- predict(var.2c, n.ahead = 10, ci = 0.95)
names(var.f10) # show object name
plot(var.f10)
fanchart(var.f10)
plot(var.2c)
fanchart(var.f10)
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries(time_series_m1, label= cases[1], drawPoints = TRUE)
housing_canada<- read.csv("CSV/house1980_2020.csv")
housing_canada_city<- read.csv("CSV/house1980_2020_with_city.csv")
names(housing_canada)
names(housing_canada_city)
#ReName column 1
colnames(housing_canada)[1] <- "ref_date" # assign new name
colnames(housing_canada_city)[1] <- "ref_date" # assign new name
# Convert ref_date from Vactor to Date Format
head(housing_canada$ref_date,5) # check rows
housing_canada$full_date =  parse_date_time(housing_canada$ref_date,  '%Y-%m')
housing_canada$full_date <- as.Date(housing_canada$full_date, format = "%Y.%m.%d")
head(housing_canada$full_date,5)
housing_canada$yr  <-year(housing_canada$full_date)
head(housing_canada, 5)
# For 2nd Data
head(housing_canada_city$ref_date,5) # check rows
housing_canada_city$full_date =  parse_date_time(housing_canada_city$ref_date,  '%Y-%m')
housing_canada_city$full_date <- as.Date(housing_canada_city$full_date, format = "%Y.%m.%d")
head(housing_canada_city$full_date,5)
housing_canada_city$yr  <-year(housing_canada_city$full_date)
head(housing_canada_city, 5)
colSums(is.na(housing_canada)) # checking NA in all columns
#Remove Al NA in VALUE column
# For 1St Data
housing_canada <- housing_canada %>% filter(!VALUE=="NA")
housing_canada %>% filter(New.housing.price.indexes=="Land only" &  New.housing.price.indexes=="Total (house and land)") # check for items, unfortunately not items is there
housing_canada <- housing_canada %>% filter(!New.housing.price.indexes=="Land only" &  !New.housing.price.indexes=="Total (house and land)") # removing above items if available
# For 2nd Data
colSums(is.na(housing_canada_city)) # checking NA in all columns
housing_canada_city <- housing_canada_city %>% filter(!VALUE=="NA")
# Remove Total (house and land) and Land only
unique(housing_canada_city$New.housing.price.indexes)
housing_canada_city %>% filter(New.housing.price.indexes=="Land only" &  New.housing.price.indexes=="Total (house and land)") # checking items
housing_canada_city <- housing_canada_city %>% filter(!New.housing.price.indexes=="Land only" &  !New.housing.price.indexes=="Total (house and land)") # removing above item if available
# List Of States
unique(housing_canada$GEO)
# List Of Cities
unique(housing_canada_city$GEO)
cases <- c('Canada', 'Quebec', 'Toronto, Ontario' ,'Windsor, Ontario')
housing_sp1 <- housing_canada %>% filter( GEO == cases[1]) # province level 1
housing_sp2 <- housing_canada %>% filter( GEO == cases[2]) # province level 2
housing_sp3 <- housing_canada_city %>% filter( GEO == cases[3]) # City level 1
housing_sp4 <- housing_canada_city %>% filter( GEO == cases[4]) # city level 2
# Cut Data By The Start Date and End Date which be inputs
# I make Code To Select Date as interactive face
start_date <- parse_date_time("1980-01-01",  "%Y-%m-%d")
end_date <- parse_date_time("2020-12-01",  "%Y-%m-%d")
# Get Start year from each sub-Data set
start_year1 <- min(housing_sp1$yr)  # min start date of province level 1
start_year2 <- min(housing_sp2$yr)  # min start date of province level 2
start_year3 <- min(housing_sp3$yr)  # min start date of city level 1
start_year4 <- min(housing_sp4$yr)  # min start date of city level 2
time_series_m1 <- ts(housing_sp1$VALUE, start = c(start_year1, 1), frequency = 12) # ts for province level 1
time_series_m2 <- ts(housing_sp2$VALUE, start = c(start_year2, 2), frequency = 12) # ts for province level 2
time_series_m3 <- ts(housing_sp3$VALUE, start = c(start_year3, 3), frequency = 12) # ts for city level 1
time_series_m4 <- ts(housing_sp4$VALUE, start = c(start_year4, 4), frequency = 12) # ts for city level 2
All <- cbind (time_series_m1,time_series_m2,time_series_m3,time_series_m4) # combine province 1 & 2 and city 1 & 2
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries(time_series_m1, label= cases[1], drawPoints = TRUE)
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries(time_series_m1, label= cases[1], drawPoints = TRUE) %>%
dyAxis("y",label = "housing price index") %>%
dyAxis("y2", label = "Years") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE )  %>%
dyRangeSelector(dateWindow = c(start_date, end_date)) %>%
dyRoller()
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries(time_series_m1, label= cases[1], drawPoints = TRUE) %>%
dyAxis("y",label = "housing price index") %>%
dyAxis("y2", label = "Years") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE )  %>%
dyRangeSelector(dateWindow = c(start_date, end_date)) %>%
dyRoller()
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries("time_series_m1", label= cases[1], drawPoints = TRUE) %>%
dyAxis("y",label = "housing price index") %>%
dyAxis("y2", label = "Years") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE )  %>%
dyRangeSelector(dateWindow = c(start_date, end_date)) %>%
dyRoller()
dygraph (All , main = "monthly housing index times series ENCD" ,xlab="Year" ) %>%
dySeries("time_series_m1", label= cases[1], drawPoints = TRUE) %>%
dySeries("time_series_m2", label= cases[2], drawPoints = TRUE) %>%
dySeries("time_series_m3", label= cases[3], drawPoints = TRUE) %>%
dySeries("time_series_m4", label= cases[4], drawPoints = TRUE) %>%
dyAxis("y",label = "housing price index") %>%
dyAxis("y2", label = "Years") %>%
dyLegend(show = "always", hideOnMouseOut = FALSE )  %>%
dyRangeSelector(dateWindow = c(start_date, end_date)) %>%
dyRoller()
plot(var.2c)
plot(var.f10)
fanchart(var.f10)
par(ask=F)
plot(var.2c)
invisible(readline(prompt="Press [enter] to continue"))
install.packages(c("backports", "bit64", "RcppArmadillo", "stringdist", "vctrs"))
par(mar=c(1,1,1,1))
